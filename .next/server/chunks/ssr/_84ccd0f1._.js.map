{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/codecare-ai/software-upgrade-assistant-frontend/src/services/scanService.ts"],"sourcesContent":["export interface ScanRequest {\n  repoUrl: string;\n  scanType: 'full' | 'incremental';\n}\n\nexport interface ScanResponse {\n  scanId: string;\n  status: 'initiated' | 'in-progress' | 'completed' | 'failed';\n  progress: number;\n}\n\nexport class ScanService {\n  static async initiateScan(request: ScanRequest): Promise<ScanResponse> {\n    try {\n      const response = await fetch('/api/scans', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to initiate scan');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error initiating scan:', error);\n      throw error;\n    }\n  }\n\n  static async getScanProgress(scanId: string): Promise<ScanResponse> {\n    try {\n      console.log(`[ScanService] Fetching progress for scan ${scanId}`);\n      const response = await fetch(`/api/scans/${scanId}/progress`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error(`[ScanService] Error response:`, data);\n        throw new Error(data.error || 'Failed to get scan progress');\n      }\n\n      console.log(`[ScanService] Progress data:`, data);\n      return data;\n    } catch (error) {\n      console.error('[ScanService] Error getting scan progress:', error);\n      throw error;\n    }\n  }\n\n  static async getScanResults(scanId: string): Promise<any> {\n    try {\n      const response = await fetch(`/api/scans/${scanId}/results`);\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to get scan results');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting scan results:', error);\n      throw error;\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAWO,MAAM;IACX,aAAa,aAAa,OAAoB,EAAyB;QACrE,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,cAAc;gBACzC,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;gBACjC,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;YACnC;YAEA,OAAO,MAAM,SAAS,IAAI;QAC5B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;IAEA,aAAa,gBAAgB,MAAc,EAAyB;QAClE,IAAI;YACF,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,QAAQ;YAChE,MAAM,WAAW,MAAM,MAAM,CAAC,WAAW,EAAE,OAAO,SAAS,CAAC;YAC5D,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,QAAQ,KAAK,CAAC,CAAC,6BAA6B,CAAC,EAAE;gBAC/C,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;YAChC;YAEA,QAAQ,GAAG,CAAC,CAAC,4BAA4B,CAAC,EAAE;YAC5C,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8CAA8C;YAC5D,MAAM;QACR;IACF;IAEA,aAAa,eAAe,MAAc,EAAgB;QACxD,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,CAAC,WAAW,EAAE,OAAO,QAAQ,CAAC;YAE3D,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;gBACjC,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;YACnC;YAEA,OAAO,MAAM,SAAS,IAAI;QAC5B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,MAAM;QACR;IACF;AACF","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/codecare-ai/software-upgrade-assistant-frontend/src/app/scan/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ScanService } from '@/services/scanService';\nimport type { ScanResult } from '@/services/dependency-scan-service';\n\nexport default function ScanPage() {\n  const router = useRouter();\n  const [repoUrl, setRepoUrl] = useState('');\n  const [scanType, setScanType] = useState<'full' | 'incremental'>('full');\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [error, setError] = useState('');\n  const [currentScanId, setCurrentScanId] = useState<string | null>(null);\n  const [scanResults, setScanResults] = useState<ScanResult | null>(null);\n\n  const validateUrl = (url: string) => {\n    const githubUrlPattern = /^https:\\/\\/github\\.com\\/[\\w-]+\\/[\\w-]+$/;\n    return githubUrlPattern.test(url);\n  };\n\n  const pollScanProgress = async (scanId: string) => {\n    try {\n      console.log(`[Page] Polling progress for scan ${scanId}`);\n      const progress = await ScanService.getScanProgress(scanId);\n      setScanProgress(progress.progress);\n\n      if (progress.status === 'in-progress' && progress.progress < 100) {\n        // Continue polling every 2 seconds\n        console.log(`[Page] Scan in progress: ${progress.progress}%`);\n        setTimeout(() => pollScanProgress(scanId), 2000);\n      } else if (progress.status === 'completed') {\n        console.log(`[Page] Scan completed, fetching results`);\n        try {\n          const results = await ScanService.getScanResults(scanId);\n          console.log(`[Page] Got results:`, results);\n          setScanResults(results);\n          setIsScanning(false);\n        } catch (resultError) {\n          console.error(`[Page] Error fetching results:`, resultError);\n          setError('Failed to fetch scan results. Please try again.');\n          setIsScanning(false);\n        }\n      } else if (progress.status === 'failed') {\n        console.log(`[Page] Scan failed`);\n        setError('Scan failed. Please try again.');\n        setIsScanning(false);\n      }\n    } catch (error) {\n      setError('Failed to get scan progress');\n      setIsScanning(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (!validateUrl(repoUrl)) {\n      setError('Please enter a valid GitHub repository URL');\n      return;\n    }\n\n    setIsScanning(true);\n    \n    try {\n      // Initiate the scan\n      const response = await ScanService.initiateScan({\n        repoUrl,\n        scanType: scanType as 'full' | 'incremental'\n      });\n\n      setCurrentScanId(response.scanId);\n      // Start polling for progress\n      pollScanProgress(response.scanId);\n    } catch (error) {\n      setError('Failed to initiate scan. Please try again.');\n      setIsScanning(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-8 p-6\">\n      <div className=\"space-y-4\">\n        <h1 className=\"text-4xl font-bold\">Scan</h1>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <label htmlFor=\"repoUrl\" className=\"block text-lg font-medium\">\n            Repo URL(s)\n          </label>\n          <input\n            id=\"repoUrl\"\n            type=\"text\"\n            value={repoUrl}\n            onChange={(e) => setRepoUrl(e.target.value)}\n            placeholder=\"https://github.com/example/app\"\n            className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-black focus:border-transparent\"\n          />\n          {error && <p className=\"text-red-500 text-sm\">{error}</p>}\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"block text-lg font-medium\">Scan Depth</label>\n          <div className=\"flex space-x-6\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"radio\"\n                name=\"scanType\"\n                value=\"full\"\n                checked={scanType === 'full'}\n                onChange={(e) => setScanType(e.target.value as 'full' | 'incremental')}\n                className=\"form-radio text-black focus:ring-black\"\n              />\n              <span>Full</span>\n            </label>\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"radio\"\n                name=\"scanType\"\n                value=\"incremental\"\n                checked={scanType === 'incremental'}\n                onChange={(e) => setScanType(e.target.value as 'full' | 'incremental')}\n                className=\"form-radio text-black focus:ring-black\"\n              />\n              <span>Incremental</span>\n            </label>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          disabled={isScanning}\n          className=\"w-full py-2 px-4 bg-black text-white font-semibold rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50\"\n        >\n          {isScanning ? 'SCANNING...' : 'BEGIN SCAN'}\n        </button>\n      </form>\n\n      {isScanning && (\n        <div className=\"space-y-2\">\n          <label className=\"block text-lg font-medium\">Scan Progress</label>\n          <div className=\"w-full h-4 bg-gray-200 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-black transition-all duration-500\"\n              style={{ width: `${scanProgress}%` }}\n            ></div>\n          </div>\n        </div>\n      )}\n\n      {scanResults && (\n        <div className=\"space-y-6 mt-8 border rounded-lg p-6\">\n          <h2 className=\"text-2xl font-bold\">Scan Results</h2>\n          \n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <h3 className=\"font-semibold\">Repository</h3>\n                <p>{scanResults.repoUrl}</p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Service</h3>\n                <p>{scanResults.service}</p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Language</h3>\n                <p>{scanResults.language}</p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Runtime</h3>\n                <p>{scanResults.runtime}</p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Base Image</h3>\n                <p>{scanResults.baseImage}</p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Status</h3>\n                <p className={`font-semibold ${\n                  scanResults.status === 'ok' ? 'text-green-600' :\n                  scanResults.status === 'partial' ? 'text-yellow-600' :\n                  'text-red-600'\n                }`}>\n                  {scanResults.status.toUpperCase()}\n                </p>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold\">Summary</h3>\n              <p className=\"mt-1\">{scanResults.summary}</p>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-2\">Dependencies</h3>\n              <div className=\"space-y-4\">\n                {scanResults.dependencies.map((dep, index) => (\n                  <div key={index} className=\"border rounded p-4\">\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <span className=\"font-medium\">Name:</span> {dep.name}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Version:</span> {dep.version}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Type:</span> {dep.type}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Status:</span> \n                        <span className={`ml-1 font-semibold ${\n                          dep.status === 'ok' ? 'text-green-600' :\n                          dep.status === 'outdated' ? 'text-yellow-600' :\n                          'text-red-600'\n                        }`}>\n                          {dep.status.toUpperCase()}\n                        </span>\n                      </div>\n                    </div>\n                    {dep.recommendations && dep.recommendations.length > 0 && (\n                      <div className=\"mt-2\">\n                        <span className=\"font-medium\">Recommendations:</span>\n                        <ul className=\"list-disc ml-5 mt-1\">\n                          {dep.recommendations.map((rec, idx) => (\n                            <li key={idx}>{rec}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 693, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/codecare-ai/software-upgrade-assistant-frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,4HACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 699, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/codecare-ai/software-upgrade-assistant-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}
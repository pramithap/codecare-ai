{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/codecare-ai/software-upgrade-assistant-frontend/src/app/api/scans/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// Declare the global scans Map\ndeclare global {\n  var scans: Map<string, any>;\n}\n\n// Initialize the global scans Map if it doesn't exist\nif (!global.scans) {\n  global.scans = new Map();\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { repoUrl, scanType } = body;\n    \n    console.log('[Scan API] Initiating scan for:', repoUrl, 'type:', scanType);\n    \n    if (!global.scans) {\n      console.log('[Scan API] Initializing scans map');\n      global.scans = new Map();\n    }\n    \n    // Generate a unique scan ID\n    const scanId = Math.random().toString(36).substring(7);\n    \n    // Store scan information\n    global.scans.set(scanId, {\n      scanId,\n      repoUrl,\n      scanType,\n      status: 'initiated',\n      progress: 0,\n      startTime: Date.now()\n    });\n\n    // Simulate starting a background process\n    simulateScanProgress(scanId);\n\n    return NextResponse.json({ \n      scanId, \n      status: 'initiated',\n      progress: 0 \n    });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to initiate scan' },\n      { status: 500 }\n    );\n  }\n}\n\nfunction simulateScanProgress(scanId: string) {\n  console.log(`[Scan API] Starting progress simulation for scan ${scanId}`);\n  \n  const scan = global.scans.get(scanId);\n  if (!scan) {\n    console.log(`[Scan API] No scan found for ID ${scanId}`);\n    return;\n  }\n\n  scan.status = 'in-progress';\n  let progress = 0;\n\n  const interval = setInterval(() => {\n    try {\n      progress += 10;\n      scan.progress = progress;\n      console.log(`[Scan API] Updated progress for ${scanId}: ${progress}%`);\n\n      if (progress >= 100) {\n        scan.status = 'completed';\n        scan.progress = 100;\n        console.log(`[Scan API] Scan ${scanId} completed`);\n        clearInterval(interval);\n      }\n\n      // Create a new scan object to ensure changes are persisted\n      const updatedScan = {...scan};\n      global.scans.set(scanId, updatedScan);\n      console.log(`[Scan API] Updated scan:`, updatedScan);\n    } catch (error) {\n      console.error(`[Scan API] Error updating scan progress:`, error);\n    }\n  }, 2000);\n}\n"],"names":[],"mappings":";;;AAAA;;AAQA,sDAAsD;AACtD,IAAI,CAAC,OAAO,KAAK,EAAE;IACjB,OAAO,KAAK,GAAG,IAAI;AACrB;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG;QAE9B,QAAQ,GAAG,CAAC,mCAAmC,SAAS,SAAS;QAEjE,IAAI,CAAC,OAAO,KAAK,EAAE;YACjB,QAAQ,GAAG,CAAC;YACZ,OAAO,KAAK,GAAG,IAAI;QACrB;QAEA,4BAA4B;QAC5B,MAAM,SAAS,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;QAEpD,yBAAyB;QACzB,OAAO,KAAK,CAAC,GAAG,CAAC,QAAQ;YACvB;YACA;YACA;YACA,QAAQ;YACR,UAAU;YACV,WAAW,KAAK,GAAG;QACrB;QAEA,yCAAyC;QACzC,qBAAqB;QAErB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,QAAQ;YACR,UAAU;QACZ;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,SAAS,qBAAqB,MAAc;IAC1C,QAAQ,GAAG,CAAC,CAAC,iDAAiD,EAAE,QAAQ;IAExE,MAAM,OAAO,OAAO,KAAK,CAAC,GAAG,CAAC;IAC9B,IAAI,CAAC,MAAM;QACT,QAAQ,GAAG,CAAC,CAAC,gCAAgC,EAAE,QAAQ;QACvD;IACF;IAEA,KAAK,MAAM,GAAG;IACd,IAAI,WAAW;IAEf,MAAM,WAAW,YAAY;QAC3B,IAAI;YACF,YAAY;YACZ,KAAK,QAAQ,GAAG;YAChB,QAAQ,GAAG,CAAC,CAAC,gCAAgC,EAAE,OAAO,EAAE,EAAE,SAAS,CAAC,CAAC;YAErE,IAAI,YAAY,KAAK;gBACnB,KAAK,MAAM,GAAG;gBACd,KAAK,QAAQ,GAAG;gBAChB,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,OAAO,UAAU,CAAC;gBACjD,cAAc;YAChB;YAEA,2DAA2D;YAC3D,MAAM,cAAc;gBAAC,GAAG,IAAI;YAAA;YAC5B,OAAO,KAAK,CAAC,GAAG,CAAC,QAAQ;YACzB,QAAQ,GAAG,CAAC,CAAC,wBAAwB,CAAC,EAAE;QAC1C,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,CAAC,wCAAwC,CAAC,EAAE;QAC5D;IACF,GAAG;AACL","debugId":null}}]
}